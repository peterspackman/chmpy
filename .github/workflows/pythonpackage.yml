name: Build package

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v3
      name: Load cache (Linux)
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v3
      name: Load cache (macOS)
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v3
      name: Load cache (Windows)
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install python build module 
      run: |
        python -m pip install --upgrade pip build ruff pytest

    - name: Build the project
      run: |
        python -m pip install -e . -v

    - name: Lint (ruff)
      run: |
        # Check for Python syntax errors or undefined names
        python -m ruff check . --select=E9,F63,F7,F82 --output-format=github
        # Run full linting with the configured rules (warnings only)
        python -m ruff check . --output-format=github

    - name: Run tests
      run: |
        python -m pytest


  build_wheels:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        pyver: [cp310, cp311, cp312, cp313]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: ${{matrix.pyver}}-*
          CIBW_ARCHS_LINUX: auto
          CIBW_ARCHS_MACOS: auto universal2
          CIBW_ARCHS_WINDOWS: auto
          # musllinux tests fail with some pid mixup
          # cross-build macos images can't be tested on this runner.
          CIBW_TEST_SKIP: >-
            *-*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          overwrite: true

  create-release:
    runs-on: ubuntu-latest
    needs: build_wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        # unpacks all CIBW artifacts into dist/
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - name: Release
      uses: softprops/action-gh-release@v1
      with: 
        files: | 
          dist/*


  upload_all:
    runs-on: ubuntu-latest
    needs: build_wheels
    environment:
      name: pypi
      url: https://pypi.org/p/chmpy/
    permissions:
      id-token: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4.1.7
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
